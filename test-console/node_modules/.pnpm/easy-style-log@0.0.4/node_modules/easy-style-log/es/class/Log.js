var w = Object.defineProperty;
var A = (i, t, e) => t in i ? w(i, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[t] = e;
var o = (i, t, e) => (A(i, typeof t != "symbol" ? t + "" : t, e), e), T = (i, t, e) => {
  if (!t.has(i))
    throw TypeError("Cannot " + e);
};
var l = (i, t, e) => (T(i, t, "read from private field"), e ? e.call(i) : t.get(i)), f = (i, t, e) => {
  if (t.has(i))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(i) : t.set(i, e);
}, c = (i, t, e, a) => (T(i, t, "write to private field"), a ? a.call(i, e) : t.set(i, e), e);
var m = (i, t, e) => (T(i, t, "access private method"), e);
import y from "../utils/colorToAnsi.js";
import E from "../utils/logLocation.js";
const $ = typeof window != "object";
var r, u, g, b, B, S, C, p;
const s = class {
  constructor() {
    f(this, B);
    f(this, C);
    f(this, r, [""]);
    f(this, u, [""]);
    f(this, g, [""]);
    f(this, b, [""]);
    o(this, "log", (...t) => {
      const e = m(this, C, p).call(this);
      return s.isDebug && !$ ? console.trace(...e, ...t) : console.log(...e, ...t);
    });
    o(this, "debug", (...t) => {
      const e = m(this, C, p).call(this, !0);
      return $ ? console.log(...e, ...t) : console.trace(...e, ...t);
    });
    return s.instance || (m(this, B, S).call(this), s.instance = this), s.instance;
  }
  bg(...t) {
    return c(this, r, t), this;
  }
  color(...t) {
    return c(this, u, t), this;
  }
  title(...t) {
    return c(this, g, t), this;
  }
  style(...t) {
    return c(this, b, t), this;
  }
  setDefaultStyle(t) {
    s.defaultBg = t.defaultBg || ["#D7F7C2"], s.defaultColor = t.defaultColor || ["#05690D"], s.defaultTitle = t.defaultTitle || ["easy-style-log"], s.defaultStyle = t.defaultStyle || [""], s.isDebug = t.isDebug || !1, s.nodeDebugBg = t.nodeDebugBg || "", s.nodeDebugColor = t.nodeDebugColor || "blue", m(this, B, S).call(this);
  }
};
let n = s;
r = new WeakMap(), u = new WeakMap(), g = new WeakMap(), b = new WeakMap(), B = new WeakSet(), S = function() {
  c(this, r, [...s.defaultBg]), c(this, u, [...s.defaultColor]), c(this, g, [...s.defaultTitle]), c(this, b, [...s.defaultStyle]);
}, C = new WeakSet(), p = function(t = !1) {
  let e = [];
  if ($) {
    let a = "";
    if (s.isDebug || t) {
      const D = s.nodeDebugBg ? y(s.nodeDebugBg, !0) : "", h = s.nodeDebugColor ? y(s.nodeDebugColor) + "" : "";
      a = `\x1B[${D}${h && D ? ";" : ""}${h}m${E()}\x1B[49;39m`;
    }
    e[0] = l(this, g).reduce((D, h, d) => {
      const x = l(this, r)[d] ? y(l(this, r)[d], !0) : l(this, r)[0] ? y(l(this, r)[0], !0) : "", F = l(this, u)[d] ? y(l(this, u)[d]) : l(this, u)[0] ? y(l(this, u)[0]) : "";
      return D + `\x1B[${x}${F && x ? ";" : ""}${F}m${h}\x1B[49;39m`;
    }, a);
  } else {
    let a = "";
    e = l(this, g).map((D, h) => {
      a += `%c ${D} `;
      const d = l(this, r)[h] || l(this, r)[0], x = l(this, u)[h] || l(this, u)[0], F = l(this, b)[h] || l(this, b)[0];
      return `background: ${d};color: ${x}; padding: 3px 6px;margin:2px 0; border-radius: 2px; font-size: 14px;  font-weight: 600;` + F;
    }), e.unshift(a);
  }
  return m(this, B, S).call(this), e;
}, o(n, "defaultBg", $ ? [""] : ["linear-gradient(to right, #12c2e9, #c471ed, #f64f59)"]), o(n, "defaultColor", $ ? [""] : ["#FFFFFF"]), o(n, "defaultTitle", ["EASY-STYLE-LOG"]), o(n, "defaultStyle", [""]), o(n, "isDebug", !1), o(n, "nodeDebugBg", ""), o(n, "nodeDebugColor", "blue"), o(n, "instance");
export {
  n as Log
};
